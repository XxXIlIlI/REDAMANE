// Script desenvolvido por marcos10pc ( EssayMaker )
// tentei deixar o script com uma cara mais legal :)
// PASTEKK

const script = document.createElement('script');
script.src = 'https://cdn.jsdelivr.net/gh/DarkModde/Dark-Scripts/ProtectionScript.js';
document.head.appendChild(script);

console.clear();
const noop = () => {};
console.warn = console.error = window.debug = noop;

const promptsGeracao = [
    `Olá! Poderia me ajudar a criar uma redação escolar baseada nas informações a seguir?
    Por favor, inclua:
    1. Um título para a redação
    2. O texto completo da redação
    3. Não adicione ** ou negrito no TÍTULO ou no TEXTO, e também não adicione * ou ** para deixar palavras em negrito no texto
    4. Não adicione nenhum emoji nem símbolos no texto
    5. Não use simbolos no texto! como "–" ou "—" ou qualquer outro e tambem não use 3 pontinhos "..."

    Por favor, formate suas respostas assim:
    TITULO: [Título da redação]  
    TEXTO: [Texto da redação]

    Aqui estão as informações para a redação:
    {dadosRedacao}
    
    Lembre-se: devolva APENAS o texto reescrito, sem quaisquer comentários ou explicações adicionais.`,

    // ... (os outros prompts permanecem iguais)
];

const promptsHumanizacao = [
    `Olá! Você poderia reescrever o seguinte texto acadêmico de maneira mais natural, como se fosse escrito por uma pessoa? Quero que o texto tenha uma sensação mais humana e fluida.
    Texto a ser reescrito:
    {textoRedacao}
    
    Lembre-se: devolva APENAS o texto reescrito, sem quaisquer comentários ou explicações adicionais.`,

    // ... (os outros prompts permanecem iguais)
];

async function manipularTextareaMUI(elementoPai, textoParaInserir) {
    const campoTexto = elementoPai.querySelector("textarea:not([aria-hidden=\"true\"])");
    if (!campoTexto) return false;

    try {
        const propriedadesReact = Object.keys(campoTexto).filter(chave => 
            chave.startsWith("__reactProps$") || 
            chave.startsWith("__reactEventHandlers$") || 
            chave.startsWith("__reactFiber$")
        );
        if (propriedadesReact.length > 0) {
            for (const propriedade of propriedadesReact) {
                const handler = campoTexto[propriedade];
                if (handler && typeof handler.onChange === "function") {
                    const eventoSimulado = {
                        target: { value: textoParaInserir },
                        currentTarget: { value: textoParaInserir },
                        preventDefault: () => {},
                        stopPropagation: () => {}
                    };
                    handler.onChange(eventoSimulado);
                    await new Promise(resolve => setTimeout(resolve, 100));
                    return true;
                }
            }
        }
    } catch (erro) { return false; }

    try {
        campoTexto.value = "";
        campoTexto.dispatchEvent(new Event("input", { bubbles: true }));
        await new Promise(resolve => setTimeout(() => {
            campoTexto.value = textoParaInserir;
            campoTexto.dispatchEvent(new Event("input", { bubbles: true }));
            campoTexto.dispatchEvent(new Event("change", { bubbles: true }));
            campoTexto.dispatchEvent(new Event("blur", { bubbles: true }));
            resolve();
        }, 50));
    } catch (erro) { return false; }

    await new Promise(resolve => setTimeout(async () => {
        if (campoTexto.value !== textoParaInserir) {
            try {
                campoTexto.focus();
                campoTexto.select();
                document.execCommand("delete", false);
                document.execCommand("insertText", false, textoParaInserir);
            } catch (erro) {}
        }
        resolve();
    }, 150));

    await new Promise(resolve => setTimeout(async () => {
        if (campoTexto.value !== textoParaInserir) {
            try {
                campoTexto.focus();
                campoTexto.value = "";
                const eventoInput = new InputEvent("input", {
                    bubbles: true,
                    data: textoParaInserir,
                    inputType: "insertText"
                });
                campoTexto.value = textoParaInserir;
                campoTexto.dispatchEvent(eventoInput);
            } catch (erro) {}
        }
        resolve();
    }, 250));

    await new Promise(resolve => setTimeout(resolve, 500));
    return true;
}

function criarEstiloNotificacao() {
    if (document.getElementById('estilo-notificacao')) return;
    const estiloNotificacao = document.createElement('style');
    estiloNotificacao.id = 'estilo-notificacao';
    estiloNotificacao.textContent = `
        .notificacao-container {position: fixed; top: 20px; right: 20px; z-index: 9999; display: flex; flex-direction: column; gap: 10px; max-width: 350px;}
        .notificacao {background-color: #000; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,.5); padding: 16px; display: flex; align-items: center; gap: 12px; transform: translateX(120%); opacity: 0; transition: transform .4s ease, opacity .3s ease; overflow: hidden; position: relative; color: #fff;}
        .notificacao.mostrar {transform: translateX(0); opacity: 1;}
        .notificacao-icone {flex-shrink: 0; width: 24px; height: 24px; display: flex; align-items: center; justify-content: center; border-radius: 50%; color: #2196f3;}
        .notificacao-conteudo {flex-grow: 1;}
        .notificacao-titulo {font-weight: 600; font-size: 16px; margin: 0 0 4px 0; color: #2196f3;}
        .notificacao-mensagem {font-size: 14px; margin: 0; color: #fff;}
        .notificacao-fechar {background:0;border:0;cursor:pointer;font-size:18px;color:#999;padding:0;transition:color .2s;}
        .notificacao-fechar:hover{color:#2196f3;}
        .notificacao-progresso{position:absolute;bottom:0;left:0;height:3px;width:100%;transform-origin:left center; background:#2196f3;}
        @keyframes progresso{0%{transform:scaleX(1)}100%{transform:scaleX(0)}}
        .pulse{animation:pulse 1s ease-in-out;}
        @keyframes pulse{0%{transform:scale(1)}50%{transform:scale(1.1)}100%{transform:scale(1)}}
    `;
    document.head.appendChild(estiloNotificacao);
}

function inicializarNotificacoes() {
    criarEstiloNotificacao();
    if (!document.querySelector('.notificacao-container')) {
        const container = document.createElement('div');
        container.className = 'notificacao-container';
        document.body.appendChild(container);
    }
}

function mostrarNotificacaoSinc(tipo, titulo, mensagem, duracao = 3000) {
    return new Promise(resolve => {
        inicializarNotificacoes();
        const container = document.querySelector('.notificacao-container');
        const notificacao = document.createElement('div');
        notificacao.className = `notificacao notificacao-${tipo}`;
        let icone = '';
        switch(tipo){
            case 'sucesso': icone='<svg ...></svg>'; break;
            case 'info': icone='<svg ...></svg>'; break;
            case 'aviso': icone='<svg ...></svg>'; break;
            case 'erro': icone='<svg ...></svg>'; break;
        }
        notificacao.innerHTML = `<div class="notificacao-icone">${icone}</div><div class="notificacao-conteudo"><h4 class="notificacao-titulo">${titulo}</h4><p class="notificacao-mensagem">${mensagem}</p></div><button class="notificacao-fechar">×</button><div class="notificacao-progresso"></div>`;
        container.appendChild(notificacao);
        setTimeout(() => {
            notificacao.classList.add('mostrar');
            const progressoEl = notificacao.querySelector('.notificacao-progresso');
            progressoEl.style.animation = `progresso ${duracao/1000}s linear`;
        }, 10);
        const botaoFechar = notificacao.querySelector('.notificacao-fechar');
        botaoFechar.addEventListener('click', () => {
            fecharNotificacao(notificacao);
            resolve();
        });
        const timeoutId = setTimeout(() => {
            fecharNotificacao(notificacao);
            resolve();
        }, duracao);
        const iconeEl = notificacao.querySelector('.notificacao-icone');
        iconeEl.classList.add('pulse');
        notificacao.dataset.timeoutId = timeoutId;
    });
}

function fecharNotificacao(notificacao) {
    if (notificacao.dataset.timeoutId) clearTimeout(parseInt(notificacao.dataset.timeoutId));
    notificacao.style.opacity = '0';
    notificacao.style.transform = 'translateX(120%)';
    setTimeout(() => { if (notificacao.parentElement) notificacao.parentElement.removeChild(notificacao); }, 300);
}

async function obterRespostaIA(promptTexto) {
    try {
        const url = "https://corsproxy.io/?url=https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=AIzaSyCtuOT8wc0ypM-FfNoN9OM_7m76V9L-KVw";
        const resposta = await fetch(url, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ contents:[{parts:[{text:promptTexto}]}] })
        });
        const dadosResposta = await resposta.json();
        return dadosResposta?.candidates?.[0]?.content?.parts?.[0]?.text || '';
    } catch (erro) { console.error("Erro ao chamar a API de IA:", erro); return ''; }
}

async function verificarRedacao() {
    const elementoRedacao = document.querySelector("p.MuiTypography-root.MuiTypography-body1.css-m576f2");
    if (elementoRedacao && elementoRedacao.textContent.includes("Redação")) {
        try {
            await mostrarNotificacaoSinc('info', 'Script Iniciado!', 'AMWARE redação maker', 5000);
            const coletaneaHTML = document.querySelector(".ql-editor").innerHTML;
            const enunciado = document.querySelector(".ql-align-justify").innerText;
            const generoTextual = document.querySelector(".css-1pvvm3t").innerText;
            const criteriosAvaliacao = document.querySelector(".css-1pvvm3t").innerText;
            const dadosRedacao = { coletanea: coletaneaHTML, enunciado, generoTextual, criteriosAvaliacao };
            const promptGeracaoAleatorio = promptsGeracao[Math.floor(Math.random() * promptsGeracao.length)].replace('{dadosRedacao}', JSON.stringify(dadosRedacao));
            await mostrarNotificacaoSinc('aviso', 'Gerando Redação', 'A redação pode demorar um pouco para ficar pronto.', 5000);
            const respostaRedacao = await obterRespostaIA(promptGeracaoAleatorio);
            if (!respostaRedacao.includes("TITULO:") || !respostaRedacao.includes("TEXTO:")) return;
            const tituloRedacao = respostaRedacao.split("TITULO:")[1].split("TEXTO:")[0].trim();
            const textoRedacao = respostaRedacao.split("TEXTO:")[1].trim();
            await mostrarNotificacaoSinc('info', 'Humanizando', 'Tornando o texto mais natural...', 5000);
            const promptHumanizacaoAleatorio = promptsHumanizacao[Math.floor(Math.random() * promptsHumanizacao.length)].replace('{textoRedacao}', textoRedacao);
            const textoHumanizado = await obterRespostaIA(promptHumanizacaoAleatorio);
            const campoTitulo = document.querySelector("textarea").parentElement;
            await manipularTextareaMUI(campoTitulo, tituloRedacao);
            const todosCamposTexto = document.querySelectorAll("textarea");
            const campoConteudo = todosCamposTexto[todosCamposTexto.length - 1].parentElement;
            await manipularTextareaMUI(campoConteudo, textoHumanizado);
            await mostrarNotificacaoSinc('sucesso', 'Tudo Pronto! 🎉', 'Redação inserida com sucesso! Tudo pronto para enviar!', 5000);
        } catch (erro) { return; }
    }
}

verificarRedacao();
console.clear();
